# Документация по проекту "ЧТФК Библиотека"

## Общее описание
Проект представляет собой веб-приложение для управления библиотекой. Состоит из двух основных частей:
- Клиентская часть (Angular)
- Серверная часть (ASP.NET Core)

## Архитектура

### Клиентская часть (Angular)
Структура клиентской части организована по модульному принципу:

1. Core модуль
   - Сервисы:
     * BookService - управление книгами (CRUD операции, фильтрация, поиск)
     * GenreService - управление жанрами (CRUD операции)
   - Модели данных:
     * Book - модель книги с полями: id, title, author, genreId, year, publisher, pageCount
     * Genre - модель жанра с полями: id, name
   - Интерфейсы:
     * BookFilters - интерфейс для фильтрации книг (поиск, жанр, год)

2. Shared модуль
   - Компоненты:
     * BookCardComponent - карточка книги для отображения в списке
     * SidebarFilterComponent - компонент фильтрации в боковой панели
   - Директивы:
     * Кастомные директивы для валидации форм
   - Пайпы:
     * Пайпы для форматирования данных

3. Pages модуль
   - Компоненты:
     * BookSearchComponent - страница поиска и фильтрации книг
     * BookListComponent - компонент списка книг
     * BookDetailComponent - детальная информация о книге
     * BookFormComponent - форма добавления/редактирования книги
     * GenreListComponent - список жанров
     * GenreFormComponent - форма добавления/редактирования жанра

### Серверная часть (ASP.NET Core)
Структура серверной части следует принципам чистой архитектуры:

1. Controllers
   - BookController:
     * GET /api/books - получение списка книг
     * GET /api/books/{id} - получение книги по ID
     * GET /api/books/{id}/content - получение содержимого книги
     * POST /api/books - создание новой книги
     * PUT /api/books/{id} - обновление книги
     * DELETE /api/books/{id} - удаление книги
   - GenreController:
     * GET /api/genres - получение списка жанров
     * GET /api/genres/{id} - получение жанра по ID
     * POST /api/genres - создание нового жанра
     * PUT /api/genres/{id} - обновление жанра
     * DELETE /api/genres/{id} - удаление жанра

2. Services
   - BookService:
     * Методы для работы с книгами
     * Валидация данных
     * Обработка файлов
   - GenreService:
     * Методы для работы с жанрами
     * Проверка связанных сущностей

3. Models
   - Book:
     * Свойства: Id, Title, Author, GenreId, Year, Publisher, PageCount
     * Навигационные свойства
     * Валидация данных
   - Genre:
     * Свойства: Id, Name
     * Навигационные свойства
     * Валидация данных

4. DTO
   - BookDTO:
     * Модель для передачи данных о книге
     * Включает только необходимые поля
   - GenreDTO:
     * Модель для передачи данных о жанре
     * Включает только необходимые поля

## Основные функции

### Управление книгами
- Просмотр списка книг:
  * Отображение в виде карточек
  * Пагинация
  * Сортировка
- Поиск книг:
  * По названию
  * По автору
  * По жанру
- Фильтрация:
  * По жанрам
  * По годам издания
  * Комбинированные фильтры
- Добавление новых книг:
  * Форма с валидацией
  * Загрузка файлов
  * Привязка к жанрам
- Редактирование существующих книг:
  * Форма с предзаполненными данными
  * Валидация изменений
- Удаление книг:
  * Подтверждение удаления
  * Проверка связанных данных
- Просмотр содержимого книг:
  * Отображение в отдельном окне
  * Поддержка различных форматов

### Управление жанрами
- Просмотр списка жанров:
  * Табличное представление
  * Сортировка
- Добавление новых жанров:
  * Форма с валидацией
  * Проверка уникальности
- Редактирование существующих жанров:
  * Форма с предзаполненными данными
  * Валидация изменений
- Удаление жанров:
  * Проверка связанных книг
  * Каскадное удаление

## Технические особенности

### Клиентская часть
- Использование RxJS:
  * Observable для асинхронных операций
  * Операторы map, filter, switchMap
  * Subject для обмена данными между компонентами
- Реализация паттерна Observer:
  * Обновление данных в реальном времени
  * Синхронизация между компонентами
- Angular Material:
  * Компоненты UI (таблицы, формы, диалоги)
  * Темизация
  * Адаптивный дизайн
- Lazy loading:
  * Загрузка модулей по требованию
  * Оптимизация начальной загрузки
- Формы:
  * Reactive Forms
  * Валидация на стороне клиента
  * Кастомные валидаторы

### Серверная часть
- Entity Framework Core:
  * Миграции базы данных
  * LINQ запросы
  * Оптимизация производительности
- RESTful API:
  * Стандартные HTTP методы
  * Коды ответов
  * Версионирование API
- Валидация:
  * Data Annotations
  * Fluent Validation
  * Кастомные валидаторы
- Обработка ошибок:
  * Глобальный обработчик исключений
  * Логирование ошибок
  * Пользовательские сообщения об ошибках


## Безопасность
- Валидация данных:
  * Проверка входных параметров
  * Санитизация данных
  * Защита от XSS
- Обработка ошибок:
  * Глобальный обработчик
  * Логирование
  * Безопасные сообщения
- Защита от SQL-инъекций:
  * Параметризованные запросы
  * ORM
- CORS:
  * Настройка политик
  * Ограничение доменов
  * Безопасные методы